name: Hyperledger Besu Network Azure - Tear Down
run-name: ${{ inputs.identifier }}

on:
  workflow_dispatch:
    inputs:   
      identifier:
        description: 'Variable that represents the release identifier'
        required: true
        type: string  
      parameters:
        description: 'Variables in json wrapped'
        required: true

jobs:
  check-required-env-variables:
    name: "required-env-variables"
    runs-on: runner-azure
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checking COMPONENT_ID
        if: ${{ env.COMPONENT_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_ID is required') 
      - name: Checking COMPONENT_NAME
        if: ${{ env.COMPONENT_NAME == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_NAME is required')     
      - name: Checking CUSTOMER_ID
        if: ${{ env.CUSTOMER_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('CUSTOMER_ID is required') 
      - name: Checking NETWORK_ID
        if: ${{ env.NETWORK_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('NETWORK_ID is required')                         
  drop-explorer:
    name: "drop-explorer"
    runs-on: runner-azure
    needs: [check-required-env-variables]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout besu repo
        run: |
          rm -rf ${{ vars.BESU_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.BESU_REPO_URL }}
          cd ${{ vars.BESU_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository" 
      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["**/infra-requirements.yaml"]'
      - name: Running playbook to drop explorer
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          ansible-galaxy collection install -r infra-requirements.yaml
          ansible-playbook -i inventories/hosts.yaml quorum-release.yaml --tags="login,tear_down" -vvvv
  drop-storage:
    name: "drop-storage"
    runs-on: runner-azure
    needs: [check-required-env-variables]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout foundation repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"              
      - name: Running playbook to drop storage
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.STORAGE_PLAYBOOK }}  --tags="never,tear_down" -vvvv
  drop-database:
    name: "drop-database"
    runs-on: runner-azure
    needs: [check-required-env-variables]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}  
      - name: Checkout foundation repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"                
      - name: Running playbook to drop database
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.DATABASE_PLAYBOOK }} --tags="never,tear_down" -vvvv
  drop-keyvault:
    name: "drop-keyvault"
    runs-on: runner-azure
    needs: [check-required-env-variables]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}   
      - name: Checkout foundation repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"              
      - name: Checkout foundation repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"               
      - name: Running playbook to drop keyvault
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.KEYVAULT_PLAYBOOK }} --tags="never,tear_down" -vvvv
  drop-service-principal:
    name: "drop-service-principal"
    runs-on: runner-azure
    needs: [drop-explorer, drop-storage, drop-database, drop-keyvault]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout foundation repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"               
      - name: Running playbook to drop service-principal
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.SP_PLAYBOOK }} --tags="never,tear_down" -vvvv

  drop-namespace:
    name: "drop-namespace"
    runs-on: runner-azure
    needs: [drop-service-principal]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }} 
      - name: Checkout foundation repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"                  
      - name: Running playbook to drop namespace
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.NAMESPACE_PLAYBOOK }} --tags="never,tear_down" -vvvv





