name: Hyperledger Besu Network Azure
run-name: ${{ inputs.identifier }}

on:
  workflow_dispatch:
    inputs:   
      identifier:
        description: 'Variable that represents the release identifier'
        required: true
        type: string  
      parameters:
        description: 'Variables in json wrapped'
        required: true

jobs:
  check-required-env-variables:
    name: "required-env-variables"
    runs-on: runner-azure
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checking BOOTNODES
        if: ${{ env.BOOTNODES == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('BOOTNODES is required')
      - name: Checking COMPONENT_ID
        if: ${{ env.COMPONENT_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_ID is required') 
      - name: Checking COMPONENT_NAME
        if: ${{ env.COMPONENT_NAME == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_NAME is required')     
      - name: Checking CUSTOMER_ID
        if: ${{ env.CUSTOMER_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('CUSTOMER_ID is required') 
      - name: Checking NETWORK_ID
        if: ${{ env.NETWORK_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('NETWORK_ID is required')        
      - name: Checking VALIDATORS
        if: ${{ env.VALIDATORS == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('VALIDATORS is required')                  
  create-namespace-and-serviceprincipal:
    name: "create-namespace-and-serviceprincipal"
    runs-on: runner-azure
    needs: [check-required-env-variables]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout Azure DevOps repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout features/github_actions
          echo "Cloned Azure DevOps repository"
      - name: Running playbook to create namespace
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.NAMESPACE_PLAYBOOK }} -vvvv
      - name: Running playbook to create service principal
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.SP_PLAYBOOK }} -vvvv
  create-database:
    name: "create-database"
    runs-on: runner-azure
    needs: [create-namespace-and-serviceprincipal]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout Azure DevOps repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"
      - name: Running playbook to create database
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.DATABASE_PLAYBOOK }} -vvvv
  create-storage:
    name: "create-storage"
    runs-on: runner-azure
    needs: [create-namespace-and-serviceprincipal]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout Azure DevOps repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"          
      - name: Running playbook to create storage
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.STORAGE_PLAYBOOK }} -vvvv
  create-keyvault:
    name: "create-keyvault"
    runs-on: runner-azure
    needs: [create-namespace-and-serviceprincipal]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout Azure DevOps repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"          
      - name: Running playbook to create keyvault
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.KEYVAULT_PLAYBOOK }} -vvvv     
  generate-network:
    name: "generate-network"
    runs-on: runner-azure
    needs: [create-keyvault, create-storage, create-database]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout Azure DevOps repo
        run: |
          rm -rf ${{ vars.BESU_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.BESU_REPO_URL }}
          cd ${{ vars.BESU_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"   
          cat infra-requirements.yaml
      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["**/infra-requirements.yaml"]'
      - name: Running playbook to generate network
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          cat infra-requirements.yaml
          ansible-galaxy collection install -r infra-requirements.yaml
          ansible-playbook -i inventories/hosts.yaml ${{ vars.BESU_NETWORK_PLAYBOOK }} --tags="login,release,generate_keys" -vvvv




