name: Hyperledger Besu Network
run-name: ${{ inputs.identifier }}

on:
  workflow_dispatch:
    inputs:   
      identifier:
        description: 'Variable that represents the release identifier'
        required: true
        type: string  
      parameters:
        description: 'Variables in json wrapped'
        required: true

jobs:
  set-environment-variables:
    name: "Set Global Environment Variables"
    runs-on: self-hosted
    steps:
      - name: Print event inputs
        run: |
          echo "Event Inputs: ${{ toJson(github.event.inputs) }}"

      - name: Export environment variables globally
        run: |
          parameters=$(echo '${{ github.event.inputs.parameters }}' | jq -r .)
          echo "BESU_CONSENSUS_ALG=$(echo $parameters | jq -r '.BESU_CONSENSUS_ALG // "QBFT"')" >> $GITHUB_ENV
          echo "BOOTNODES=$(echo $parameters | jq -r '.BOOTNODES // ""')" >> $GITHUB_ENV
          echo "COMPONENT_ID=$(echo $parameters | jq -r '.COMPONENT_ID // ""')" >> $GITHUB_ENV
          echo "COMPONENT_NAME=$(echo $parameters | jq -r '.COMPONENT_NAME // ""')" >> $GITHUB_ENV
          echo "COUNTRY=$(echo $parameters | jq -r '.COUNTRY // ""')" >> $GITHUB_ENV
          echo "CUSTOMER_ID=$(echo $parameters | jq -r '.CUSTOMER_ID // ""')" >> $GITHUB_ENV
          echo "DNS_TYPE=$(echo $parameters | jq -r '.DNS_TYPE // "public"')" >> $GITHUB_ENV
          echo "DNS_ZONE=$(echo $parameters | jq -r '.DNS_ZONE // "blockchainlab.network"')" >> $GITHUB_ENV
          echo "LOCATION=$(echo $parameters | jq -r '.LOCATION // ""')" >> $GITHUB_ENV
          echo "MIN_GAS_PRICE=$(echo $parameters | jq -r '.MIN_GAS_PRICE // "0"')" >> $GITHUB_ENV
          echo "NET_NAME=$(echo $parameters | jq -r '.NET_NAME // "ks-net"')" >> $GITHUB_ENV
          echo "NETWORK_ID=$(echo $parameters | jq -r '.NETWORK_ID // ""')" >> $GITHUB_ENV
          echo "NODE_COUNT=$(echo $parameters | jq -r '.NODE_COUNT // "4"')" >> $GITHUB_ENV
          echo "ORGANIZATION=$(echo $parameters | jq -r '.ORGANIZATION // ""')" >> $GITHUB_ENV
          echo "QUORUM_EXPLORER_IMAGE_TAG=$(echo $parameters | jq -r '.QUORUM_EXPLORER_IMAGE_TAG // "8091"')" >> $GITHUB_ENV
          echo "SUBNET_NAME=$(echo $parameters | jq -r '.SUBNET_NAME // "ks-subnet"')" >> $GITHUB_ENV
          echo "VALIDATORS=$(echo $parameters | jq -r '.VALIDATORS // ""')" >> $GITHUB_ENV
          echo "ENV=$(echo $parameters | jq -r '.ENV // ""')" >> $GITHUB_ENV

      - name: List all environment variables
        run: printenv

      - name: Check exported BOOTNODES value
        run: |
          echo "Exported BOOTNODES: $BOOTNODES"

  check-required-env-variables:
    name: "required-env-variables"
    runs-on: self-hosted
    needs: [set-environment-variables]
    environment: dev
    steps:
      - name: Checking BOOTNODES
        if: ${{ env.BOOTNODES == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('BOOTNODES is required')
      - name: Checking COMPONENT_ID
        if: ${{ env.COMPONENT_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_ID is required') 
      - name: Checking COMPONENT_NAME
        if: ${{ env.COMPONENT_NAME == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_NAME is required')     
      - name: Checking CUSTOMER_ID
        if: ${{ env.CUSTOMER_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('CUSTOMER_ID is required') 
      - name: Checking NETWORK_ID
        if: ${{ env.NETWORK_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('NETWORK_ID is required')

  checkout-anisble-pipelines:
    name: "checkout-ansible-pipelines"
    runs-on: self-hosted
    needs: [check-required-env-variables]
    environment: dev
    steps:
      - name: Checkout Azure DevOps repo
        env:
          AZURE_GIT_ACCESS_TOKEN: ${{ secrets.AZURE_GIT_ACCESS_TOKEN }}
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          echo "Running copy of sa-key.json"
          echo "${{ secrets.SAKEY }}" >> sa-key.json
          cat sa-key.json
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"

  create-namespace:
    name: "create-namespace"
    runs-on: self-hosted
    needs: [checkout-anisble-pipelines]
    environment: dev
    steps:
      - name: Running playbook to create namespace
        run: |
          missing_envs=""

          if [ -z "${{ env.BESU_CONSENSUS_ALG }}" ]; then
            missing_envs+=" BESU_CONSENSUS_ALG, "
          fi
          if [ -z "${{ env.BOOTNODES }}" ]; then
            missing_envs+=" BOOTNODES, "
          fi
          if [ -z "${{ env.COMPONENT_ID }}" ]; then
            missing_envs+=" COMPONENT_ID, "
          fi
          if [ -z "${{ env.COMPONENT_NAME }}" ]; then
            missing_envs+=" COMPONENT_NAME, "
          fi
          if [ -z "${{ env.COUNTRY }}" ]; then
            missing_envs+=" COUNTRY, "
          fi
          if [ -z "${{ env.CUSTOMER_ID }}" ]; then
            missing_envs+=" CUSTOMER_ID, "
          fi
          if [ -z "${{ env.DNS_TYPE }}" ]; then
            missing_envs+=" DNS_TYPE, "
          fi
          if [ -z "${{ env.DNS_ZONE }}" ]; then
            missing_envs+=" DNS_ZONE, "
          fi
          if [ -z "${{ env.LOCATION }}" ]; then
            missing_envs+=" LOCATION, "
          fi
          if [ -z "${{ env.MIN_GAS_PRICE }}" ]; then
            missing_envs+=" MIN_GAS_PRICE, "
          fi
          if [ -z "${{ env.NET_NAME }}" ]; then
            missing_envs+=" NET_NAME, "
          fi
          if [ -z "${{ env.NETWORK_ID }}" ]; then
            missing_envs+=" NETWORK_ID, "
          fi
          if [ -z "${{ env.NODE_COUNT }}" ]; then
            missing_envs+=" NODE_COUNT, "
          fi
          if [ -z "${{ env.ORGANIZATION }}" ]; then
            missing_envs+=" ORGANIZATION, "
          fi
          if [ -z "${{ env.QUORUM_EXPLORER_IMAGE_TAG }}" ]; then
            missing_envs+=" QUORUM_EXPLORER_IMAGE_TAG, "
          fi
          if [ -z "${{ env.SUBNET_NAME }}" ]; then
            missing_envs+=" SUBNET_NAME, "
          fi
          if [ -z "${{ env.VALIDATORS }}" ]; then
            missing_envs+=" VALIDATORS, "
          fi
          if [ -z "${{ env.ENV }}" ]; then
            missing_envs+=" ENV, "
          fi

          if [ -n "$missing_envs" ]; then
            echo "Error: The following required environment variables are missing: $missing_envs"
            exit 1
          fi

            echo "Starting Ansible playbook with the following parameters:"
            echo "BESU_CONSENSUS_ALG=${{ env.BESU_CONSENSUS_ALG }}"
            echo "BOOTNODES=${{ env.BOOTNODES }}"
            echo "COMPONENT_ID=${{ env.COMPONENT_ID }}"
            echo "COMPONENT_NAME=${{ env.COMPONENT_NAME }}"
            echo "COUNTRY=${{ env.COUNTRY }}"
            echo "CUSTOMER_ID=${{ env.CUSTOMER_ID }}"
            echo "DNS_TYPE=${{ env.DNS_TYPE }}"
            echo "DNS_ZONE=${{ env.DNS_ZONE }}"
            echo "LOCATION=${{ env.LOCATION }}"
            echo "MIN_GAS_PRICE=${{ env.MIN_GAS_PRICE }}"
            echo "NET_NAME=${{ env.NET_NAME }}"
            echo "NETWORK_ID=${{ env.NETWORK_ID }}"
            echo "NODE_COUNT=${{ env.NODE_COUNT }}"
            echo "ORGANIZATION=${{ env.ORGANIZATION }}"
            echo "QUORUM_EXPLORER_IMAGE_TAG=${{ env.QUORUM_EXPLORER_IMAGE_TAG }}"
            echo "SUBNET_NAME=${{ env.SUBNET_NAME }}"
            echo "VALIDATORS=${{ env.VALIDATORS }}"
            echo "ENV=${{ env.ENV }}"

          cd ${{ vars.FOUNDATION_REPO_PATH }}
          if [ $? -ne 0 ]; then
            echo "Failed to change directory. Exiting pipeline."
            exit 1
          fi

          ansible-playbook -i inventories/hosts.yaml ${{ vars.NAMESPACE_PLAYBOOK }} --tags ${{ vars.TAGS }} -vvvv
          if [ $? -ne 0 ]; then
            echo "Ansible playbook execution failed. Exiting pipeline."
            exit 1
          else
            echo "Ansible playbook executed successfully. Namespace created."
          fi

  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: self-hosted
    needs: [create-namespace]
    environment: dev
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_GIT_ACCESS_TOKEN }}
          tenant-id: ${{ secrets.AZURE_GIT_ACCESS_TOKEN }}
          subscription-id: ${{ secrets.AZURE_GIT_ACCESS_TOKEN }}
