name: Hyperledger Besu Network Azure
run-name: ${{ inputs.identifier }}

on:
  workflow_dispatch:
    inputs:   
      identifier:
        description: 'Variable that represents the release identifier'
        required: true
        type: string  
      parameters:
        description: 'Variables in json wrapped'
        required: true

env:
  BESU_CONSENSUS_ALG: ${{ fromJson(github.event.inputs.parameters).BESU_CONSENSUS_ALG || 'QBFT' }}
  BOOTNODES: ${{ fromJson(github.event.inputs.parameters).BOOTNODES || '' }}
  COMPONENT_ID: ${{ fromJson(github.event.inputs.parameters).COMPONENT_ID || '' }}
  COMPONENT_NAME: ${{ fromJson(github.event.inputs.parameters).COMPONENT_NAME || '' }}
  COUNTRY: ${{ fromJson(github.event.inputs.parameters).COUNTRY || '' }}
  CUSTOMER_ID: ${{ fromJson(github.event.inputs.parameters).CUSTOMER_ID || '' }}
  DNS_TYPE: ${{ fromJson(github.event.inputs.parameters).DNS_TYPE || 'public' }}
  DNS_ZONE: ${{ fromJson(github.event.inputs.parameters).DNS_ZONE || 'blockchainlab.network' }} 
  LOCATION: ${{ fromJson(github.event.inputs.parameters).LOCATION || '' }}
  MIN_GAS_PRICE: ${{ fromJson(github.event.inputs.parameters).MIN_GAS_PRICE || '0' }} 
  NET_NAME: ${{ fromJson(github.event.inputs.parameters).NET_NAME || 'ks-net' }} 
  NETWORK_ID: ${{ fromJson(github.event.inputs.parameters).NETWORK_ID || '' }}
  NODE_COUNT: ${{ fromJson(github.event.inputs.parameters).NODE_COUNT || '4' }} 
  ORGANIZATION: ${{ fromJson(github.event.inputs.parameters).ORGANIZATION || '' }}
  QUORUM_EXPLORER_IMAGE_TAG: ${{ fromJson(github.event.inputs.parameters).QUORUM_EXPLORER_IMAGE_TAG || '8091' }} 
  SUBNET_NAME: ${{ fromJson(github.event.inputs.parameters).SUBNET_NAME || 'ks-subnet' }} 
  VALIDATORS: ${{ fromJson(github.event.inputs.parameters).VALIDATORS || '' }}
  ENV: ${{ fromJson(github.event.inputs.parameters).ENV || '' }}

jobs:
  create-file:
    runs-on: ubuntu-latest
    steps:
    - name: Create a file with environment variables
      run: |
        echo "BESU_CONSENSUS_ALG=${{ env.BESU_CONSENSUS_ALG }}" >> vars.txt
        echo "BOOTNODES=${{ env.BOOTNODES }}" >> vars.txt
        echo "COMPONENT_ID=${{ env.COMPONENT_ID }}" >> vars.txt
        echo "COMPONENT_NAME=${{ env.COMPONENT_NAME }}" >> vars.txt
        echo "COUNTRY=${{ env.COUNTRY }}" >> vars.txt
        echo "CUSTOMER_ID=${{ env.CUSTOMER_ID }}" >> vars.txt
        echo "DNS_TYPE=${{ env.DNS_TYPE }}" >> vars.txt
        echo "DNS_ZONE=${{ env.DNS_ZONE }}" >> vars.txt
        echo "LOCATION=${{ env.LOCATION }}" >> vars.txt
        echo "MIN_GAS_PRICE=${{ env.MIN_GAS_PRICE }}" >> vars.txt
        echo "NET_NAME=${{ env.NET_NAME }}" >> vars.txt
        echo "NETWORK_ID=${{ env.NETWORK_ID }}" >> vars.txt
        echo "NODE_COUNT=${{ env.NODE_COUNT }}" >> vars.txt
        echo "ORGANIZATION=${{ env.ORGANIZATION }}" >> vars.txt
        echo "QUORUM_EXPLORER_IMAGE_TAG=${{ env.QUORUM_EXPLORER_IMAGE_TAG }}" >> vars.txt
        echo "SUBNET_NAME=${{ env.SUBNET_NAME }}" >> vars.txt
        echo "VALIDATORS=${{ env.VALIDATORS }}" >> vars.txt
        echo "ENV=${{ env.ENV }}" >> vars.txt
    - name: Upload vars file
      uses: actions/upload-artifact@v3
      with:
        name: vars
        path: vars.txt

  test-read-file:
    runs-on: ubuntu-latest
    needs: create-file
    steps:
    - name: Download vars file
      uses: actions/download-artifact@v3
      with:
        name: vars
    - name: Read the file
      run: cat vars.txt

  test-read-bootnodes:
    runs-on: ubuntu-latest
    needs: create-file
    steps:
    - name: Download vars file
      uses: actions/download-artifact@v3
      with:
        name: vars
    - name: Read BOOTNODES value
      run: |
        BOOTNODES=$(grep "BOOTNODES" vars.txt | cut -d'=' -f2)
        echo "BOOTNODES is: $BOOTNODES"

  check-required-env-variables:
    name: "required-env-variables"
    runs-on: self-hosted
    environment: dev
    needs: create-file
    steps:
      - name: Download vars file
        uses: actions/download-artifact@v3
        with:
          name: vars
      - name: Export environment variables from vars.txt
        run: |
          set -a
          source vars.txt
          set +a
      - name: Checking BOOTNODES
        if: ${{ env.BOOTNODES == '' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('BOOTNODES is required')
      - name: Checking COMPONENT_ID
        if: ${{ env.COMPONENT_ID == '' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('COMPONENT_ID is required') 
      - name: Checking COMPONENT_NAME
        if: ${{ env.COMPONENT_NAME == '' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('COMPONENT_NAME is required')     
      - name: Checking CUSTOMER_ID
        if: ${{ env.CUSTOMER_ID == '' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('CUSTOMER_ID is required') 
      - name: Checking NETWORK_ID
        if: ${{ env.NETWORK_ID == '' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('NETWORK_ID is required')        
      # - name: Checking VALIDATORS
      #   if: ${{ env.VALIDATORS == '' }}
      #   uses: actions/github-script@v3
      #   with:
      #     script: |
      #       core.setFailed('VALIDATORS is required')
