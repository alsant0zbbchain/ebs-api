name: Hyperledger Besu New Node Azure
run-name: ${{ inputs.identifier }}

on:
  workflow_dispatch:
    inputs:   
      identifier:
        description: 'Variable that represents the release identifier'
        required: true
        type: string  
      parameters:
        description: 'Variables in json wrapped'
        required: true

jobs:
  check-required-env-variables:
    name: "required-env-variables"
    runs-on: [ self-hosted, azure ]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}                       
      - name: Checking COMPONENT_NAME
        if: ${{ env.COMPONENT_NAME == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_NAME is required')     
      - name: Checking COMPONENT_ID
        if: ${{ env.COMPONENT_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('COMPONENT_ID is required')                   
      - name: Checking CUSTOMER_ID
        if: ${{ env.CUSTOMER_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('CUSTOMER_ID is required') 
      - name: Checking NETWORK_ID
        if: ${{ env.NETWORK_ID == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('NETWORK_ID is required')     
      - name: Checking NETWORK_OWNER
        if: ${{ env.NETWORK_OWNER == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('NETWORK_OWNER is required')                   
      - name: Checking ORGANIZATION
        if: ${{ env.ORGANIZATION == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('ORGANIZATION is required')     
      - name: Checking VALIDATOR
        if: ${{ env.VALIDATOR == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('VALIDATOR is required')       
      - name: Checking BOOTNODE
        if: ${{ env.BOOTNODE == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('BOOTNODE is required')                                            
      - name: Checking NODES_DATA
        if: ${{ env.NODES_DATA == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('NODES_DATA is required')      
      - name: Checking VALIDATORS_DATA
        if: ${{ env.VALIDATORS_DATA == '' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('VALIDATORS_DATA is required')                            
  checkout-anisble-pipelines:
    name: "checkout-ansible-pipelines"
    runs-on: [ self-hosted, azure ]
    needs: [check-required-env-variables]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Checkout Azure Foundation DevOps repo
        run: |
          rm -rf ${{ vars.FOUNDATION_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.FOUNDATION_REPO_URL }}
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"
      - name: Checkout Azure Besu DevOps repo
        run: |
          rm -rf ${{ vars.BESU_REPO_PATH }}
          git clone https://$(echo $AZURE_GIT_ACCESS_TOKEN)@${{ vars.BESU_REPO_URL }}
          cd ${{ vars.BESU_REPO_PATH }}
          git checkout ${{ vars.BRANCH }}
          echo "Cloned Azure DevOps repository"   
      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["**/infra-requirements.yaml"]'  
      - name: installing requirements
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          ansible-galaxy collection install -r infra-requirements.yaml
          echo "Requirements installed"                     
  create-namespace:
    name: "create-namespace"
    runs-on: [ self-hosted, azure ]
    needs: [checkout-anisble-pipelines]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to create namespace
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.NAMESPACE_PLAYBOOK }} -vvvv
  create-service-principal:
    name: "create-service-principal"
    runs-on: [ self-hosted, azure ]
    needs: [create-namespace]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to create service principal
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.SP_PLAYBOOK }} -vvvv
  create-database:
    name: "create-database"
    runs-on: [ self-hosted, azure ]
    needs: [create-service-principal]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to create database
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.DATABASE_PLAYBOOK }} -vvvv
  create-storage:
    name: "create-storage"
    runs-on: [ self-hosted, azure ]
    needs: [create-service-principal]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to create storage
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.STORAGE_PLAYBOOK }} -vvvv
  create-keyvault:
    name: "create-keyvault"
    runs-on: [ self-hosted, azure ]
    needs: [create-service-principal]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to create keyvault
        run: |
          cd ${{ vars.FOUNDATION_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.KEYVAULT_PLAYBOOK }} -vvvv   
  create-keys:
    name: "create-keys"
    runs-on: [ self-hosted, azure ]
    needs: [create-keyvault, create-storage, create-database]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to create foundation components
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          cat infra-requirements.yaml        
          ansible-playbook -i inventories/hosts.yaml ${{ vars.NEW_BESU_NODE_PLAYBOOK }} --tags="release,login" -vvvv
  create-foundation-components:
    name: "create-foundation-components"
    runs-on: [ self-hosted, azure ]
    needs: [create-keys]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to create foundation components
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.BESU_NODE_PLAYBOOK }} --tags="release,login" -vvvv  
  expose-bootnode:
    name: "expose-bootnode"
    runs-on: [ self-hosted, azure ]
    needs: [create-foundation-components]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to deploy node
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.BOOTNODES_PLAYBOOK }} --tags="deploy,login" -vvvv                  
  deploy-node:
    name: "deploy-node"
    runs-on: [ self-hosted, azure ]
    needs: [expose-bootnode]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to deploy node
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.BESU_NODE_PLAYBOOK }} --tags="deploy,login" -vvvv     
  validator-node:
    name: "validator-node"
    runs-on: [ self-hosted, azure ]
    needs: [deploy-node]
    environment: dev-azure
    steps:
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(vars) }}
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}       
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ github.event.inputs.parameters }}    
      - name: Running playbook to deploy node
        run: |
          cd ${{ vars.BESU_REPO_PATH }}
          ansible-playbook -i inventories/hosts.yaml ${{ vars.NEW_BESU_VALIDATOR_PLAYBOOK  }} --tags="release" -vvvv